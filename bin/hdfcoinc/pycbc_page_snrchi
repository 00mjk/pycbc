#!/usr/bin/env python
import numpy, h5py, argparse, logging, matplotlib
matplotlib.use('Agg')
from mpl_toolkits.axes_grid1.inset_locator import zoomed_inset_axes
import pylab
from pycbc.events import veto
from matplotlib import colors

parser = argparse.ArgumentParser()
parser.add_argument('--trigger-file', help='Single ifo trigger file')
parser.add_argument('--veto-file', help='Optional, file of veto segments to remove triggers')
parser.add_argument('--min-snr', type=float, help='Optional, Minimum SNR to plot')
parser.add_argument('--output-file')
parser.add_argument('--verbose')
args = parser.parse_args()

if args.verbose:
    logging.basicConfig(format='%(asctime)s : %(message)s', level=logging.DEBUG)

f = h5py.File(args.trigger_file, 'r')

snr = f['snr'][:]
chisq = f['chisq'][:]
chisq_dof = f['chisq_dof'][:]
chisq /= (chisq_dof * 2 - 2)

if args.veto_file:
    time = f['end_time'][:]
    locs, segs = veto.indices_outside_segments(time, f.attrs['ifo'], [args.veto_file])
    snr = snr[locs]
    chisq = chisq[locs]

if args.min_snr is not None:
    locs = snr > args.min_snr
    snr = snr[locs]
    chisq = chisq[locs]

pylab.hexbin(snr, chisq, gridsize=300,
             xscale='log', yscale='log', mincnt=1, norm=colors.LogNorm())

ax = pylab.gca()
pylab.grid()   
ax.set_xscale('log')
cb = pylab.colorbar() 
cb.set_label('Trigger Density')
pylab.xlabel('Signal-to-noise Ratio')
pylab.ylabel('Reduced $\chi^2$')
pylab.title('%s: Single Detector Trigger Distribution' % f.attrs['ifo'])
pylab.savefig(args.output_file, dpi=300)




