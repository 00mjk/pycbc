#! /usr/bin/env python

import os
from optparse import OptionParser
import ConfigParser
import subprocess

parser = OptionParser()
parser.add_option('--config', type=str)          
(options, args) = parser.parse_args()   

confs = ConfigParser.ConfigParser()
confs.read(options.config)

banksim_prog = confs.get("executables", "banksim")
combine_prog = confs.get("executables", "combine")

log_file = confs.get("workflow", "log-file")
injection_file = confs.get("workflow", "injection-file")
bank_file = confs.get("workflow", "bank-file")

injections_per_job = confs.get("workflow", "injections-per-job")
templates_per_job = confs.get("workflow", "templates-per-job")
     
print "Creating submit files"   
f = open("match_combine.submit", "w")
f.write("""
universe = local
getenv = True
executable = """ + combine_prog + """
arguments = --inj-num=$(JOB_NUM) -o ../match/match$(JOB_NUM).dat \
output = ../out/com-out$(JOB_NUM)
error = ../err/com-err$(JOB_NUM)
log = """ + log_file + """ 
initialdir=match-part
transfer_executable = false
queue 1
""")
f.close()

bs_options = ""
for opt in confs.options("banksim"):
    val = confs.get("banksim", opt)
    bs_options += "--" + opt + " " + val + " \\" + "\n"

f = open("banksim.submit", "w")
f.write("""
universe = Vanilla
getenv = True
executable = """ + banksim_prog + """
arguments = \
--signal-file injection/injection$(JOB_NUM).xml \
--template-file bank/bank$(PART_NUM).xml \
--match-file match-part/match$(JOB_NUM)part$(PART_NUM).dat \
--asd-file ./ZERO_DET_high_P.txt \ 
""" + bs_options + """
output = out/out$(JOB_NUM)part$(PART_NUM)
error = err/err$(JOB_NUM)part$(PART_NUM)
transfer_executable = false
log = """ + log_file + """ 
queue 1
""")
f.close()

print "Making workspace directories..."
subprocess.call(['mkdir', '-p', 'bank'])
subprocess.call(['mkdir', '-p', 'match'])
subprocess.call(['mkdir', '-p', 'injection'])
subprocess.call(['mkdir', '-p', 'match-part'])  
subprocess.call(['mkdir', '-p', 'out'])  
subprocess.call(['mkdir', '-p', 'err'])  

print "Splitting template bank..."
num_banks = subprocess.call(['pycbc_split_table', '-n', str(templates_per_job), '-t', bank_file, '-e', 'bank/bank'])
print "Splitting injection file..."
num_injs = subprocess.call(['pycbc_split_table', '-n', str(injections_per_job), '-t', injection_file,  '-e', 'injection/injection'])

print "Creating Dag..."
f = open("banksim.dag", "w")

for inj_num in range(num_injs):
    num = str(inj_num)
    f.write("Job COM" + num + " match_combine.submit\n")
    f.write("VARS COM" + num + ' JOB_NUM="' + num + '"\n')
    f.write("PRIORITY COM" + num + ' 10000\n')
    for bank_num in range(num_banks):
        part_num = str(bank_num)
        f.write('Job JOB' + num + '-' + part_num + ' banksim.submit\n')
        f.write('VARS JOB' + num + "-" + part_num + ' JOB_NUM="' + num + '"\n') 
        f.write('VARS JOB' + num+ "-" + part_num + ' PART_NUM="' + part_num + '"\n') 
        f.write('PARENT JOB' + num + "-" + part_num + " CHILD COM" + num + '\n')
        f.write('PRIORITY JOB' + num + "-" + part_num + ' ' + num + '\n')
        
f.close()
print "Done"

