#!/usr/bin/python
""" This program converts single detector xml files into hdf files 
in preparation for coincidence
"""
import numpy, argparse, h5py, os

def read_files(trigger_files, columns, column_types, attribute_columns):
    """ Read in the column of data from the ligolw xml format
    """
    data = {}
    attrs = {}
    ths = []
    
    from glue.ligolw import ligolw, table, lsctables, utils as ligolw_utils
    # dummy class needed for loading LIGOLW files
    class LIGOLWContentHandler(ligolw.LIGOLWContentHandler):
        pass
    lsctables.use_in(LIGOLWContentHandler)
    
    for i, filename in enumerate(trigger_files):
        indoc = ligolw_utils.load_filename(filename, False, 
                                           contenthandler=LIGOLWContentHandler)
        sngl_table = table.get_table(indoc, 'sngl_inspiral') 
        
        for column, ctype in zip(columns, column_types):
            if column not in data:
                data[column] = []    
            col_data = numpy.array(sngl_table.get_column(column), dtype=ctype)
            data[column] = numpy.concatenate([data[column], col_data]) 
            
        if i == 0:
            if  i == 0:
                search_sum = table.get_table(indoc, lsctables.SearchSummaryTable.tableName)
                attrs['start_time'] = search_sum[0].out_start_time
                attrs['end_time'] = search_sum[0].out_end_time
                attrs['ifo'] = search_sum[0].ifos
       
            for attr in attribute_columns:
                attrs[attr] = sngl_table.get_column(attr)[0]
                
        # Template id hack
        m1 = numpy.array(sngl_table.get_column('mass1'), dtype=numpy.float32)
        m2 = numpy.array(sngl_table.get_column('mass2'), dtype=numpy.float32)
        s1 = numpy.array(sngl_table.get_column('spin1z'), dtype=numpy.float32)
        s2 = numpy.array(sngl_table.get_column('spin2z'), dtype=numpy.float32)
 
        th = numpy.zeros(len(m1), dtype=int)
        for j, v in enumerate(zip(m1, m2, s1, s2)):
            th[j] = hash(v)
        ths.append(th)
    data['template_hash'] = numpy.concatenate(ths)
     
    return data, attrs

def hash_to_row(template_hashes):
    row_lookup = {}
    for i, h in enumerate(template_hashes):
        row_lookup[h] = i
    return row_lookup

def group_trigs_by_hash(template_hash, trig_hash, num_groups):
    sort_trig = trig_hash.argsort()
    trig_hash = trig_hash[sort_trig]

    bounds = []
    for i in range(num_groups):
        index = len(template_hash) / num_groups * i
        bounds.append(template_hash[index])        
    
    trig_bounds = numpy.searchsorted(trig_hash, bounds)
    trig_bounds = list(trig_bounds) + [len(trig_hash)]
    
    template_map = hash_to_row(template_hash)
    
    left = []
    right = []
    tids = []
    for j in range(len(trig_bounds) - 1):
        l = trig_bounds[j]
        r = trig_bounds[j+1]
        
        tid = numpy.zeros(r-l, dtype=numpy.uint32)
        for i, h in enumerate(trig_hash[l:r]):
            tid[i] = template_map[h]
            
        tids.append(tid)
        left.append(l)
        right.append(r)
    return numpy.array(left), numpy.array(right), numpy.concatenate(tids), sort_trig

parser = argparse.ArgumentParser()
parser.add_argument('--trigger-files', nargs='+')
parser.add_argument('--bank-file')
parser.add_argument('--number-of-groups', type=int)
parser.add_argument('--output-file')
args = parser.parse_args()

f = h5py.File(args.bank_file, "r")
template_hashes = f['template_hash'][:]
data, attrs = read_files(args.trigger_files, 
                columns=['snr',
                         'chisq',
                         'bank_chisq',
                         'cont_chisq',
                         'end_time',
                         'end_time_ns',
                         'sigmasq',
                         'coa_phase',
                        ],
                column_types=[numpy.float32,
                              numpy.float32,
                              numpy.float32,
                              numpy.float32,
                              numpy.float64,
                              numpy.float64,
                              numpy.float32,
                              numpy.float32
                              ],
                 attribute_columns=['chisq_dof',
                                    'bank_chisq_dof',
                                    'cont_chisq_dof',
                                    ])
left, right, tids, sorting = group_trigs_by_hash(template_hashes, 
                                    data['template_hash'],
                                    args.number_of_groups)

data['end_time'] = data['end_time'] + 1e-9 * data['end_time_ns']
data.pop('end_time_ns', None)                                 
                            
f = h5py.File(args.output_file, "w")
for key in attrs.keys():
    f.attrs[key] = attrs[key]

if len(data['snr']) > 0:
    for col in data.keys():
        f[col] = data[col][sorting]
    f['template_id'] = tids
    f['template_group/left'] = left
    f['template_group/right'] = right          
else:
    logging.info('There were no triggers in the sngl_inspiral table')
