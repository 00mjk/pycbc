#!/usr/bin/env python

# Copyright (C) 2013 Ian W. Harry
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation; either version 3 of the License, or (at your
# option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General
# Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

"""
Programe for contatenating the output of the geometric aligned bank dagman.
This will gather all the meta-output files and create a valid template bank
xml file.
"""

import copy
import time
import os
import sys
import fileinput
import glob
import optparse

from glue.ligolw import ligolw
from glue.ligolw import table
from glue.ligolw import lsctables
from glue.ligolw import ilwd
from glue.ligolw import utils as ligolw_utils
from glue.ligolw.utils import process as ligolw_process
from glue.segmentdb import segmentdb_utils
from glue import pidfile as pidfile
from glue import git_version
from scipy.interpolate import interp1d
import matplotlib
matplotlib.use('Agg')
import pylab
from pylab import arange,pi,sin,cos,sqrt
from lal import LAL_PI, LAL_MTSUN_SI
from numpy import loadtxt
import pycbc.version
import pycbc.tmpltbank

__author__  = "Ian Harry <ian.harry@astro.cf.ac.uk>"
__version__ = pycbc.version.git_verbose_msg
__date__    = pycbc.version.date
__program__ = "pycbc_aligned_bank_cat"

def return_empty_sngl():
  sngl = lsctables.SnglInspiral()  
  cols = lsctables.SnglInspiralTable.validcolumns
  for entry in cols.keys():
    if cols[entry] in ['real_4', 'real_8']:
      setattr(sngl, entry, 0.)
    elif cols[entry] == 'int_4s':
      setattr(sngl, entry, 0)
    elif cols[entry] == 'lstring':
      setattr(sngl, entry, '')
    elif entry == 'process_id':
      sngl.process_id = ilwd.ilwdchar("sngl_inspiral:process_id:0")
    elif entry == 'event_id':
      sngl.event_id = ilwd.ilwdchar("sngl_inspiral:event_id:0")
    else:
      print >> sys.stderr, "Column %s not recognized" %(entry)
      raise ValueError
  return sngl

# Read command line options
usage = """usage: %prog [options]"""
_desc = __doc__[1:]
parser = optparse.OptionParser(usage, version=__version__, description=_desc)
parser.add_option("-i", "--input-glob",  help="file glob the list of paramters")
parser.add_option("-o", "--output-file",  help="Output file name")

options, args = parser.parse_args()

# Sanity check options
if not options.input_glob:
    parser.error("Must supply --input-glob.")
if not options.output_file:
    parser.error("Must supply --output-file.")

# Read in template params
# NOTE: Files must be set out so that the columns are:
# Mass1, Mass2, Spin1z, Spin2z

tempBank = loadtxt(fileinput.input(glob.glob(options.input_glob)))

# FIXME: Currently the aligned spin bank will not output the ethinc components.
# They are not meaningful for an aligned spin bank anyway. If these values are
# needed for any reason, this code would have to be able to recalculate the
# moments (or read them in) and use the correct value of f0.
pycbc.tmpltbank.output_sngl_inspiral_table(options.output_file, tempBank, None,\
         1, calculate_ethinca_comps=False,\
         programName=__program__,optDict=options.__dict__,\
         comment="", ifos=[""], version=pycbc.version.git_hash,\
         cvs_repository='pycbc/'+pycbc.version.git_branch,\
         cvs_entry_time=pycbc.version.date)
