#!/bin/bash

DAX_FILE=""
LOG_PATH=""
CACHE_FILE=""

GETOPT_CMD=`getopt -o d:l:c:h --long dax:,log-path:,cache-file:,help -n 'pycbc_basic_pegasus_plan' -- "$@"`
eval set -- "$GETOPT_CMD"

while true ; do
  case "$1" in
    -d|--dax)
      case "$2" in
        "") shift 2 ;;
        *) DAX_FILE=$2 ; shift 2 ;;
      esac ;;
    -l|--log-path)
      case "$2" in
        "") shift 2 ;;
        *) LOG_PATH=$2 ; shift 2 ;;
      esac ;;
    -c|--cache-file)
      case "$2" in
        "") shift 2 ;;
        *) CACHE_FILE=$2 ; shift 2 ;;
      esac ;;
    -h|--help)
      echo "usage: pycbc_basic_pegasus_plan [-h]"
      echo "                                --dax DAX"
      echo "                                --log-path LOG"
      echo "                                [--cache-file FILE]"
      echo
      echo "required arguments:"
      echo "  -d, --dax DAX           name of the dax file to plan"
      echo "  -l, --log-path LOG      log directory where the excutable workflow is"
      echo "                             generated"
      echo
      echo "optional arguments:"
      echo "  -h, --help              show this help message and exit"
      echo "  -c, --cache-file FILE   comma separated list of replica cache files"
      echo
      exit 0 ;;
    --) shift ; break ;;
    *) echo "Internal error!" ; exit 1 ;;
  esac
done

if [ "x$DAX_FILE" == "x" ]; then
  echo "Error: --dax must be specified. Use --help for options."
  exit 1
fi

if [ "x$LOG_PATH" == "x" ]; then
  echo "Error: --log-path must be specified. Use --help for options."
  exit 1
fi

# find the site-local template directory
PEG_DIR=`python -c 'from pycbc.workflow import PEGASUS_FILE_DIRECTORY;print PEGASUS_FILE_DIRECTORY'`
SITE_TEMPLATE=$PEG_DIR/basic_site_template.xml

# Set up the site-local with the correct paths
echo 'cat <<END_OF_TEXT' >  temp.sh
cat $SITE_TEMPLATE       >> temp.sh
echo 'END_OF_TEXT'       >> temp.sh
bash temp.sh > site-local-parsed.xml

# Plan the workflow
echo "Generating concrete workflow"
touch _reuse.cache

if [ "x$CACHE_FILE" != "x" ]; then
  cp $CACHE_FILE _reuse.cache
  pegasus-plan --conf $PEG_DIR/basic_pegasus.conf -d $DAX_FILE --sites local -o local --dir $LOG_PATH --cleanup inplace --cache $CACHE_FILE --cluster label,horizontal
else
  pegasus-plan --conf $PEG_DIR/basic_pegasus.conf -d $DAX_FILE --sites local -o local --dir $LOG_PATH --cleanup inplace --cluster label,horizontal
fi
