#!/usr/bin/env python

# Copyright (C) 2015 Christopher M. Biwer
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation; either version 3 of the License, or (at your
# option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General
# Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

import pycbc
import pycbc.version

import os
import copy
import logging
import urlparse
import argparse
import lal
import Pegasus.DAX3 as dax
from glue import segments
import pycbc.workflow as _workflow

# read command line
parser = argparse.ArgumentParser(usage='pycbc_make_sngl_workflow \
[--options]',
                                 description="Workflow generator for a \
                                 single detector analysis.")
parser.add_argument("--name", type=str, required=True,
                    help="Descriptive name of the analysis.")
_workflow.add_workflow_command_line_group(parser)
args = parser.parse_args()

# setup log
logging.basicConfig(format='%(asctime)s:%(levelname)s : %(message)s',
                    level=logging.INFO,datefmt='%I:%M:%S')

# directory names
runDir = os.path.join(os.getcwd(), args.name)
segDir = runDir + '/segments'
datafindDir = runDir + '/datafind'
fulldataDir = runDir + '/full_data'
outputDir = runDir + '/output'

# change into run dir
if not os.path.exists(runDir):
  os.makedirs(runDir)
os.chdir(runDir)

# setup workflow
workflow = _workflow.Workflow(args, args.name)

# get segments
scienceSegs, segsFileList = _workflow.setup_segment_generation(workflow, segDir)

# get frames
datafinds, scienceSegs = _workflow.setup_datafind_workflow(workflow, scienceSegs,
                           datafindDir, segsFileList)

# setup template bank
banks = _workflow.setup_tmpltbank_workflow(workflow, scienceSegs, datafinds, 
                                       datafindDir)

# setup splitbank
splitBanks = _workflow.setup_splittable_workflow(workflow, banks, datafindDir)

# setup matched filtering
insps = _workflow.setup_matchedfltr_workflow(workflow, scienceSegs, datafinds,
                                         splitBanks, fulldataDir)

#################
# setup plotting
#################

# setup directory
if not os.path.exists(outputDir):
  os.makedirs(outputDir)
os.makedirs(outputDir+'/segments')

# get segment files
# FIXME: hardcoded
cp_exec = _workflow.Executable(workflow.cp, 'cp', out_dir=outputDir+'/segments')
cpnode = cp_exec.create_node()
cpnode.add_arg(segDir+'/*.xml')
cpnode.add_arg(outputDir+'/segments')
workflow.add_node(cpnode)

# save
workflow.save()
logging.info('Finished.')
