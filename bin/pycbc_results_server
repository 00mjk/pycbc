#!/bin/env python
import argparse, os
from flask import Flask, render_template, url_for, send_from_directory
import pycbc.ahope
import pycbc.results.followup

parser = argparse.ArgumentParser()
parser.add_argument('--plots-base-dir')
parser.add_argument('--trigger-file-lists', nargs='+')
parser.add_argument('--host')
args = parser.parse_args()

app = Flask('pycbc.results')

def retrieve(filename):
    return open(filename, 'r').read()
    
def get_folders(directory):
    dirs = [d for d in os.listdir(directory) if os.path.isdir(os.path.join(directory, d))]
    return dirs

def get_sections(base, fol):
    directory = os.path.join(base, fol)

    files = [f for f in os.listdir(directory) if os.path.isfile(os.path.join(directory, f))]   
    
    sections = []
    headings = []
    types = []
    for fil in files:
        name = fil.split('.')[0]
        path = os.path.join(directory, fil)
        t = fil.split('.')[1]
        
        if t == 'html':
            sections.append(retrieve(path))
        elif t == 'png':
            sections.append(os.path.join(fol, fil))
        else:
            continue
        
        headings.append(name)
        types.append(t)
             
    return sections, headings, types  

@app.route('/')
def index():
    return section_view('')

# Custom static data
@app.route('/cdn/<path:filename>')
def custom_static(filename):
    return send_from_directory(args.plots_base_dir, filename)

@app.route('/sections/<folder>/')
def section_view(folder):
    folders = get_folders(args.plots_base_dir)
    sections, headings, types = get_sections(args.plots_base_dir, folder)
    tp = render_template('base.html', headings=headings, 
                                      folder=folder, 
                                      folders=folders,
                                      types = types,
                                      sections=sections, 
                                      zip=zip)
    return tp

trigger_file_list = pycbc.ahope.AhopeFileList()
for fil in args.trigger_file_lists:
    print fil
    trigger_file_list += pycbc.ahope.AhopeFileList.load(fil)
 
@app.route('/followup/<tag>/<start>/<end>')
def followup_view(start, end, tag):
    ifos = ['L1', 'H1']
    tag = str(tag)
    start = float(start)
    end = float(end)
    select = trigger_file_list.find_output_with_tag(tag)
    return pycbc.results.followup.trigger_timeseries_plot(select, ifos, start, end)

app.run(debug=True, host=args.host)
