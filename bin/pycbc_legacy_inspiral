#!/usr/bin/env /usr/bin/python
"""This program provides a legacy interface that emulates the lalapps_inspiral
arguments. Many (most) options are not implemented and may not ever be. They
are still eaten but are noted as such in the arguments section.

"""
import lalsimulation
from optparse import OptionParser, OptionGroup
from subprocess import check_call
             
TAKES_ARG = 1
NO_ARG = 0

def argify(parser, args):
    for arg, t in args:
        if t == TAKES_ARG:
            parser.add_option(arg, type=str)
        if t == NO_ARG:
            parser.add_option(arg, action='store_true', default=False)

parser = OptionParser(
    usage   = "%prog [OPTIONS]",
    description = """Legacy interface to find single detector gravitational-wave triggers. 
                     See lalapps_inspiral for information on the arguments themselves.
                  """ )


args = [('--verbose', NO_ARG),
        ('--user-tag', TAKES_ARG),
        ('--ifo-tag', TAKES_ARG),
        ('--gps-start-time', TAKES_ARG),
        ('--gps-end-time', TAKES_ARG),
        ('--pad-data', TAKES_ARG),
        ('--frame-cache', TAKES_ARG),
        ('--channel-name', TAKES_ARG),
        ('--injection-file', TAKES_ARG),
        ('--bank-file', TAKES_ARG),
        ('--sample-rate', TAKES_ARG),
        ('--segment-length', TAKES_ARG),
        ('--segment-overlap', TAKES_ARG),
        ('--low-frequency-cutoff', TAKES_ARG),
        ('--inverse-spec-length', TAKES_ARG),
        ('--approximant', TAKES_ARG),
        ('--order', TAKES_ARG),
        ('--snr-threshold', TAKES_ARG),
        ('--chisq-bins', TAKES_ARG),
        ('--chisq-delta', TAKES_ARG),
        ('--chisq-threshold', TAKES_ARG),
        ('--cluster-method', TAKES_ARG),
        ('--cluster-window', TAKES_ARG),
        ('--trig-start-time', TAKES_ARG),
        ('--trig-end-time', TAKES_ARG),
        ('--strain-high-pass-freq', TAKES_ARG),
        ('--maximization-interval', TAKES_ARG),
        ('--gpu-device-id', TAKES_ARG),
        ]
             
unused_args = [('--number-of-segments', TAKES_ARG),
               ('--version', NO_ARG),
               ('--comment', TAKES_ARG),
               ('--gps-start-time-ns', TAKES_ARG),
               ('--gps-end-time-ns', TAKES_ARG),
               ('--slide-time', TAKES_ARG),
               ('--slide-time-ns', TAKES_ARG),
               ('--glob-frame-data', TAKES_ARG),
               ('--frame-type', TAKES_ARG),
               ('--calibration-cache', TAKES_ARG),
               ('--glob-calibration-cache', TAKES_ARG),
               ('--calibrated-data', TAKES_ARG),
               ('--strain-high-pass-order', TAKES_ARG),
               ('--strain-high-pass-atten', TAKES_ARG),
               ('--point-calibration', TAKES_ARG),
               ('--fast', NO_ARG),
               ('--inject-overhead', NO_ARG),
               ('--enable-filter-inj-only', NO_ARG),
               ('--disable-filter-inj-only', NO_ARG),
               ('--hardware-injection', NO_ARG),
               ('--td-follow-up', NO_ARG),
               ('--start-template', TAKES_ARG),
               ('--stop-template', TAKES_ARG),
               ('--resample-filter', TAKES_ARG),
               ('--disable-high-pass', NO_ARG),
               ('--enable-high-pass', NO_ARG),
               ('--high-pass-order', TAKES_ARG),
               ('--high-pass-attenuation', TAKES_ARG),
               ('--spectrum-type', TAKES_ARG),
               ('--reverse-chirp-bank', TAKES_ARG),
               ('--enable-dynamic-tmplt-flow', NO_ARG),
               ('--dynamic-range-exponent', TAKES_ARG),
               ('--enable-rsq-veto', NO_ARG),
               ('--disable-rsq-veto', NO_ARG),
               ('--rsq-veto-window', TAKES_ARG),
               ('--rsq-veto-threshold', TAKES_ARG),
               ('--do-rsq-veto', NO_ARG),
               ('--rsq-veto-time-thresh', TAKES_ARG),
               ('--rsq-veto-max-snr', TAKES_ARG),
               ('--rsq-veto-coeff', TAKES_ARG),
               ('--rsq-veto-pow', TAKES_ARG),
               ('--bank-veto-subbank-size', TAKES_ARG),
               ('--autochisq-stride', TAKES_ARG),
               ('--autochisq-length', TAKES_ARG),
               ('--autochisq-two-sided', NO_ARG),
               ('--bank-veto-time-freq', NO_ARG),
               ('--ts-cluster', TAKES_ARG),
               ('--ts-endtime-interval', TAKES_ARG),
               ('--ts-metric-scaling', TAKES_ARG),
               ('--bank-pass-template', TAKES_ARG),
               ('--taper-template', TAKES_ARG),
               ('--cdata-length', TAKES_ARG),
               ('--enable-output', NO_ARG),
               ('--output-mask', TAKES_ARG),
               ('--write-compress', NO_ARG),
               ('--disable-output', NO_ARG),
               ('--white-gaussian', TAKES_ARG),
               ('--gaussian-noise', TAKES_ARG),
               ('--colored-gaussian', TAKES_ARG),
               ('--random-seed', TAKES_ARG),
               ('--bank-simulation', TAKES_ARG),
               ('--enable-bank-sim-max', NO_ARG),
               ('--disable-bank-sim-max', NO_ARG),
               ('--sim-approximant', TAKES_ARG),
               ('--sim-frame', TAKES_ARG),
               ('--sim-frame-channel', TAKES_ARG),
               ('--sim-minimum-mass', TAKES_ARG),
               ('--sim-maximum-mass', TAKES_ARG),
               ('--bank-sim-flower', TAKES_ARG),
               ('--data-checkpoint', NO_ARG),
               ('--checkpoint-path', TAKES_ARG),
               ('--output-path', TAKES_ARG),
               ('--username', TAKES_ARG),
               ('--comput-node-dir', TAKES_ARG),
               ('--write-raw-data', NO_ARG),
               ('--write-filter-data', NO_ARG),
               ('--write-response', NO_ARG),
               ('--write-spectrum', NO_ARG),
               ('--write-snrsq', NO_ARG),
               ('--write-chisq', NO_ARG),
               ('--write-coh-trigs', NO_ARG),
               ('--write-cdata', NO_ARG),
               ('--write-template', NO_ARG),
               ]

group = OptionGroup(parser, "Used",
                    "These options are translated to pycbc_inspiral options.")
argify(group, args)
parser.add_option_group(group)

group = OptionGroup(parser, "Unused Options",
                    "Caution: These arguments are eaten but ignored.")
argify(group, unused_args)
parser.add_option_group(group)

opt, argv = parser.parse_args()

def pass_arg(old, new, args, opt):
    print opt
    for a1, a2 in zip(old, new):
        a1 = a1.replace('-', '_')
        val = opt[a1[2:]]
        if val is True:
            args.append(a2)
        elif val is not None:
            args.append(a2)
            args.append(str(val))
        
real_args = []

old = [ '--verbose', 
        '--user-tag', 
        '--ifo-tag', 
        '--gps-start-time', 
        '--gps-end-time', 
        '--pad-data', 
        '--frame-cache', 
        '--channel-name', 
        '--injection-file', 
        '--bank-file', 
        '--sample-rate', 
        '--low-frequency-cutoff', 
        '--snr-threshold', 
        '--chisq-bins', 
        '--chisq-threshold',
        '--chisq-delta',
        '--cluster-method', 
        '--cluster-window', 
        '--trig-start-time', 
        '--trig-end-time', 
        '--strain-high-pass-freq', 
        '--inverse-spec-length',
        '--maximization-interval']
new = [ '--verbose',
        '--user-tag', 
        '--ifo-tag', 
        '--gps-start-time', 
        '--gps-end-time', 
        '--pad-data', 
        '--frame-cache', 
        '--channel-name', 
        '--injection-file', 
        '--bank-file', 
        '--sample-rate', 
        '--low-frequency-cutoff', 
        '--snr-threshold', 
        '--chisq-bins', 
        '--chisq-threshold',
        '--chisq-delta',
        '--cluster-method', 
        '--cluster-window', 
        '--trig-start-time', 
        '--trig-end-time', 
        '--strain-high-pass', 
        '--psd-inverse-length',
        '--maximization-interval']        
        
pass_arg(old, new, real_args, vars(opt))

sr = int(opt.sample_rate)
sl = int(opt.segment_length)     
ov = int(opt.segment_overlap)
o = opt.order

seg_pad = ov / sr / 2
seg_len = sl / sr

stride = seg_len / 2

apx = opt.approximant
    
if opt.gpu_device_id:
    real_args += ['--processing-scheme', 'cuda']
    real_args += ['--processing-device-id', opt.gpu_device_id]

real_args += ['--psd-estimation', 'median']
real_args += ['--psd-segment-stride', str(stride)]
real_args += ['--approximant', apx]
real_args += ['--order', str(lalsimulation.GetOrderFromString(o))]        
real_args += ['--segment-length', str(seg_len)]
real_args += ['--segment-start-pad', str(seg_pad)]
real_args += ['--segment-end-pad', str(seg_pad)]
real_args += ['--psd-segment-length', str(seg_len)]

print real_args
check_call(['pycbc_inspiral'] + real_args)


